name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, storage-service]

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: backend/${{ matrix.service }}

    - name: Lint code
      run: npm run lint
      working-directory: backend/${{ matrix.service }}

    - name: Run tests
      run: npm test
      working-directory: backend/${{ matrix.service }}

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: frontend

    - name: Lint code
      run: npm run lint
      working-directory: frontend

    - name: Run tests
      run: npm test
      working-directory: frontend

  build:
    needs: [test, test-frontend]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, storage-service, frontend]
        
    steps:
    - uses: actions/checkout@v3

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend service
      if: matrix.service != 'frontend'
      uses: docker/build-push-action@v4
      with:
        context: ./backend/${{ matrix.service }}
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: aicloud/${{ matrix.service }}:latest

    - name: Build and push frontend
      if: matrix.service == 'frontend'
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: aicloud/frontend:latest
        build-args: |
          VITE_API_BASE_URL=${{ secrets.API_BASE_URL }}

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
    - name: Deploy to Kubernetes
      run: |
        # Apply any changes to configmaps or secrets
        kubectl apply -f k8s/config/
        
        # Update deployments with latest images
        kubectl set image deployment/api-gateway api-gateway=aicloud/api-gateway:latest
        kubectl set image deployment/user-service user-service=aicloud/user-service:latest
        kubectl set image deployment/storage-service storage-service=aicloud/storage-service:latest
        kubectl set image deployment/frontend frontend=aicloud/frontend:latest
        
        # Verify deployments
        kubectl rollout status deployment/api-gateway
        kubectl rollout status deployment/user-service
        kubectl rollout status deployment/storage-service
        kubectl rollout status deployment/frontend