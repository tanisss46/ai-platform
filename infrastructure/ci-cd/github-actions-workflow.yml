name: AICloud CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        cd ../backend/api-gateway
        npm ci
        cd ../user-service
        npm ci
        cd ../storage-service
        npm ci
        cd ../llm-assistant-service
        npm ci
        cd ../ai-orchestration-service
        npm ci
      
    - name: Run linting
      run: |
        cd frontend
        npm run lint
        cd ../backend/api-gateway
        npm run lint
        cd ../user-service
        npm run lint
        cd ../storage-service
        npm run lint
        cd ../llm-assistant-service
        npm run lint
        cd ../ai-orchestration-service
        npm run lint
    
    - name: Run tests
      run: |
        cd frontend
        npm test
        cd ../backend/api-gateway
        npm test
        cd ../user-service
        npm test
        cd ../storage-service
        npm test
        cd ../llm-assistant-service
        npm test
        cd ../ai-orchestration-service
        npm test

  build:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set environment variables
      run: |
        if [[ $GITHUB_REF == refs/heads/main ]]; then
          echo "ENV=production" >> $GITHUB_ENV
        else
          echo "ENV=staging" >> $GITHUB_ENV
        fi
        echo "TAG=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./infrastructure/docker/frontend/Dockerfile
        push: true
        tags: |
          aicloud/frontend:${{ env.TAG }}
          aicloud/frontend:${{ env.ENV }}
    
    - name: Build and push API Gateway
      uses: docker/build-push-action@v4
      with:
        context: ./backend/api-gateway
        file: ./infrastructure/docker/backend/api-gateway.Dockerfile
        push: true
        tags: |
          aicloud/api-gateway:${{ env.TAG }}
          aicloud/api-gateway:${{ env.ENV }}
    
    - name: Build and push User Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/user-service
        file: ./infrastructure/docker/backend/user-service.Dockerfile
        push: true
        tags: |
          aicloud/user-service:${{ env.TAG }}
          aicloud/user-service:${{ env.ENV }}
    
    - name: Build and push Storage Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/storage-service
        file: ./infrastructure/docker/backend/storage-service.Dockerfile
        push: true
        tags: |
          aicloud/storage-service:${{ env.TAG }}
          aicloud/storage-service:${{ env.ENV }}
    
    - name: Build and push LLM Assistant Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/llm-assistant-service
        file: ./infrastructure/docker/backend/llm-assistant-service.Dockerfile
        push: true
        tags: |
          aicloud/llm-assistant-service:${{ env.TAG }}
          aicloud/llm-assistant-service:${{ env.ENV }}
    
    - name: Build and push AI Orchestration Service
      uses: docker/build-push-action@v4
      with:
        context: ./backend/ai-orchestration-service
        file: ./infrastructure/docker/backend/ai-orchestration-service.Dockerfile
        push: true
        tags: |
          aicloud/ai-orchestration-service:${{ env.TAG }}
          aicloud/ai-orchestration-service:${{ env.ENV }}

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set environment variables
      run: |
        if [[ $GITHUB_REF == refs/heads/main ]]; then
          echo "ENV=production" >> $GITHUB_ENV
          echo "KUBE_NAMESPACE=aicloud-prod" >> $GITHUB_ENV
        else
          echo "ENV=staging" >> $GITHUB_ENV
          echo "KUBE_NAMESPACE=aicloud-staging" >> $GITHUB_ENV
        fi
        echo "TAG=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.25.0'
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
    
    - name: Update deployment files
      run: |
        cd infrastructure/kubernetes
        find . -name "*.yaml" -type f -exec sed -i "s|__TAG__|${{ env.TAG }}|g" {} \;
        find . -name "*.yaml" -type f -exec sed -i "s|__ENV__|${{ env.ENV }}|g" {} \;
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f infrastructure/kubernetes/namespace.yaml
        kubectl apply -f infrastructure/kubernetes/config-maps.yaml
        kubectl apply -f infrastructure/kubernetes/secrets.yaml
        kubectl apply -f infrastructure/kubernetes/services
        kubectl apply -f infrastructure/kubernetes/deployments
